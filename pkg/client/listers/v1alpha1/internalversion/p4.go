/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	v1alpha1 "p4kube/pkg/apis/p4kube/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// P4Lister helps list P4s.
// All objects returned here must be treated as read-only.
type P4Lister interface {
	// List lists all P4s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.P4, err error)
	// P4s returns an object that can list and get P4s.
	P4s(namespace string) P4NamespaceLister
	P4ListerExpansion
}

// p4Lister implements the P4Lister interface.
type p4Lister struct {
	indexer cache.Indexer
}

// NewP4Lister returns a new P4Lister.
func NewP4Lister(indexer cache.Indexer) P4Lister {
	return &p4Lister{indexer: indexer}
}

// List lists all P4s in the indexer.
func (s *p4Lister) List(selector labels.Selector) (ret []*v1alpha1.P4, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.P4))
	})
	return ret, err
}

// P4s returns an object that can list and get P4s.
func (s *p4Lister) P4s(namespace string) P4NamespaceLister {
	return p4NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// P4NamespaceLister helps list and get P4s.
// All objects returned here must be treated as read-only.
type P4NamespaceLister interface {
	// List lists all P4s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.P4, err error)
	// Get retrieves the P4 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.P4, error)
	P4NamespaceListerExpansion
}

// p4NamespaceLister implements the P4NamespaceLister
// interface.
type p4NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all P4s in the indexer for a given namespace.
func (s p4NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.P4, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.P4))
	})
	return ret, err
}

// Get retrieves the P4 from the indexer for a given namespace and name.
func (s p4NamespaceLister) Get(name string) (*v1alpha1.P4, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("p4"), name)
	}
	return obj.(*v1alpha1.P4), nil
}
