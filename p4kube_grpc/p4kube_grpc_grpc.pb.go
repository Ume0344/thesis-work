// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: p4kube_grpc/p4kube_grpc.proto

package p4kube

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// P4DeploymentServiceClient is the client API for P4DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P4DeploymentServiceClient interface {
	DeployP4(ctx context.Context, in *P4Resource, opts ...grpc.CallOption) (P4DeploymentService_DeployP4Client, error)
}

type p4DeploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP4DeploymentServiceClient(cc grpc.ClientConnInterface) P4DeploymentServiceClient {
	return &p4DeploymentServiceClient{cc}
}

func (c *p4DeploymentServiceClient) DeployP4(ctx context.Context, in *P4Resource, opts ...grpc.CallOption) (P4DeploymentService_DeployP4Client, error) {
	stream, err := c.cc.NewStream(ctx, &P4DeploymentService_ServiceDesc.Streams[0], "/p4kube_grpc.P4DeploymentService/DeployP4", opts...)
	if err != nil {
		return nil, err
	}
	x := &p4DeploymentServiceDeployP4Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P4DeploymentService_DeployP4Client interface {
	Recv() (*DeploymentStatus, error)
	grpc.ClientStream
}

type p4DeploymentServiceDeployP4Client struct {
	grpc.ClientStream
}

func (x *p4DeploymentServiceDeployP4Client) Recv() (*DeploymentStatus, error) {
	m := new(DeploymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P4DeploymentServiceServer is the server API for P4DeploymentService service.
// All implementations must embed UnimplementedP4DeploymentServiceServer
// for forward compatibility
type P4DeploymentServiceServer interface {
	DeployP4(*P4Resource, P4DeploymentService_DeployP4Server) error
	mustEmbedUnimplementedP4DeploymentServiceServer()
}

// UnimplementedP4DeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP4DeploymentServiceServer struct {
}

func (UnimplementedP4DeploymentServiceServer) DeployP4(*P4Resource, P4DeploymentService_DeployP4Server) error {
	return status.Errorf(codes.Unimplemented, "method DeployP4 not implemented")
}
func (UnimplementedP4DeploymentServiceServer) mustEmbedUnimplementedP4DeploymentServiceServer() {}

// UnsafeP4DeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P4DeploymentServiceServer will
// result in compilation errors.
type UnsafeP4DeploymentServiceServer interface {
	mustEmbedUnimplementedP4DeploymentServiceServer()
}

func RegisterP4DeploymentServiceServer(s grpc.ServiceRegistrar, srv P4DeploymentServiceServer) {
	s.RegisterService(&P4DeploymentService_ServiceDesc, srv)
}

func _P4DeploymentService_DeployP4_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P4Resource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P4DeploymentServiceServer).DeployP4(m, &p4DeploymentServiceDeployP4Server{stream})
}

type P4DeploymentService_DeployP4Server interface {
	Send(*DeploymentStatus) error
	grpc.ServerStream
}

type p4DeploymentServiceDeployP4Server struct {
	grpc.ServerStream
}

func (x *p4DeploymentServiceDeployP4Server) Send(m *DeploymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

// P4DeploymentService_ServiceDesc is the grpc.ServiceDesc for P4DeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P4DeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p4kube_grpc.P4DeploymentService",
	HandlerType: (*P4DeploymentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployP4",
			Handler:       _P4DeploymentService_DeployP4_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "p4kube_grpc/p4kube_grpc.proto",
}
